#!/bin/sh

echo $0 "$@" > /tmp/glkout

if [ $# != 6 ]
then
	echo "usage: $0 <glexec> <proxy> <pid> <signal> <max-glexec-retries> <min-glexec-retry-delay>" >&2
	exit 1
fi

GLEXEC="$1"
PROXY="$2"
PID="$3"
SIGNAL="$4"
MAX_GLEXEC_ERRORS="$5"
MIN_GLEXEC_RETRY_DELAY="$6"

# in case glexec creates a target proxy, we will control
# where it puts it, and we will make sure it gets cleaned up
if [ -d /tmp ]; then
  GLEXEC_TARGET_PROXY=/tmp/condor_glexec_kill_proxy.$$
  if [ -f "$GLEXEC_TARGET_PROXY" ]; then
    # a file by this name already exists, so do not mess with it
    unset GLEXEC_TARGET_PROXY
  else
    export GLEXEC_TARGET_PROXY
  fi
fi

# use glexec to kill the given PID with the given signal
#
SH=`readlink -f /bin/sh`
GLEXEC_CLIENT_CERT="$PROXY"
export GLEXEC_CLIENT_CERT

glexec_errors=0
while [ 1 ]; do
  "$GLEXEC" "$SH" -c "if [ -f '$GLEXEC_TARGET_PROXY' ]; then rm '$GLEXEC_TARGET_PROXY'; fi; /bin/kill -$SIGNAL $PID"

  glexec_rc=$?
  if [ $glexec_rc -eq 0 ]; then
    break
  elif [ $glexec_rc -ne 202 ] && [ $glexec_rc -ne 203 ]; then
    # Either a non-transient glexec error, or an error from the command
    # we are asking glexec to run.
    exit 2
  fi

  # This _could_ be a transient issue, such as a communication error with GUMS,
  # so retry up to some limit.
  glexec_errors=$(( $glexec_errors + 1 ))
  if [ $glexec_errors -gt $MAX_GLEXEC_ERRORS ]; then
    exit 3
  fi

  # truncated exponential backoff
  # sleep for X * min(100,1+random_number_in_range(0,glexec_errors-1))
  delay_rand=$(( (1 + 0x0$(hexdump -n 4 -e '"%4x\n"' /dev/urandom) % $glexec_errors) % 100 ))
  delay=$(( $MIN_GLEXEC_RETRY_DELAY * $delay_rand ))
  echo "Glexec exited with status $glexec_rc; retrying in $delay seconds." >&2
  sleep $delay
done

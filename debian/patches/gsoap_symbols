gsoap IPv6 support changes the layout struct of soap, breaking builds. This patch is a combination of patches from the following tickets:
https://htcondor-wiki.cs.wisc.edu/index.cgi/tktview?tn=3698
https://htcondor-wiki.cs.wisc.edu/index.cgi/tktview?tn=3740

--- a/build/cmake/macros/CondorDaemon.cmake
+++ b/build/cmake/macros/CondorDaemon.cmake
@@ -44,7 +44,11 @@
 		add_dependencies(condor_${_CNDR_TARGET} gen_${_CNDR_TARGET}_soapfiles)
 		# Do not export gsoap symbols - they may break loadable modules.
 		if ( LINUX )
-			set_target_properties( condor_${_CNDR_TARGET} PROPERTIES LINK_FLAGS "-Wl,--exclude-libs=libgsoapssl++.a -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../condor_daemon_core.V6/daemon.version")
+			if ( PROPER )
+				set_target_properties( condor_${_CNDR_TARGET} PROPERTIES LINK_FLAGS "-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../condor_daemon_core.V6/daemon.version.proper")
+			else()
+				set_target_properties( condor_${_CNDR_TARGET} PROPERTIES LINK_FLAGS "-Wl,--exclude-libs=libgsoapssl++.a -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../condor_daemon_core.V6/daemon.version")
+			endif()
 		endif()
 	endif()
 	
--- /dev/null
+++ b/src/condor_daemon_core.V6/daemon.version.proper
@@ -0,0 +1,13 @@
+# This is a linker script for Linux
+# This prevents the condor daemons from exporting gsoap symbols.
+#
+# Note we globally export dc_soap_*.  This is because no-op
+# stubs are available as weak symbols in libcondor_utils.  So,
+# without global strong symbols in this daemon, libcondor_utils will
+# prefer the ones that do not function.
+#
+condor_daemon {
+  # Note the C++ mangling here.
+  global: _Z14dc_soap_acceptP4SockPK4soap; _Z13dc_soap_serveP4soap; _Z12dc_soap_freeP4soap; _Z12dc_soap_initRP4soap; soap_putheader; soap_serializeheader; soap_faultstring; soap_faultsubcode; soap_faultcode; soap_getheader; soap_getfault; namespaces; soap_faultdetail; soap_putfault; soap_serializefault; soap_check_faultdetail; soap_markelement; soap_check_faultsubcode; soap_getelement; soap_putelement;
+  local: *;
+};
--- a/src/condor_daemon_core.V6/soap_core.cpp
+++ b/src/condor_daemon_core.V6/soap_core.cpp
@@ -65,7 +65,19 @@
 		//   3. increase size of send and receive buffers
 		//   4. set SO_KEEPALIVE [done automatically by CEDAR accept()]
 	cursoap->socket = socket->get_file_desc();
-	cursoap->peer = socket->peer_addr().to_sin();
+		// If you use Fedora's IPv6 patch for gsoap, peer is sockaddr_storage.
+		// Upstream has peer of type sockaddr_in.
+		// This trickery is done to keep the code compatible with both.
+	if (sizeof(cursoap->peer) == sizeof(sockaddr_storage))
+	{
+		sockaddr_storage store = socket->peer_addr().to_storage();
+		memcpy(&cursoap->peer, &store, sizeof(cursoap->peer));
+	}
+	else
+	{
+		sockaddr_in store = socket->peer_addr().to_sin();
+		memcpy(&cursoap->peer, &store, sizeof(cursoap->peer));
+	}
 	cursoap->recvfd = soap->socket;
 	cursoap->sendfd = soap->socket;
 	if ( cursoap->recv_timeout > 0 ) {
--- a/src/condor_includes/condor_sockaddr.h
+++ b/src/condor_includes/condor_sockaddr.h
@@ -53,6 +53,7 @@
 	condor_sockaddr(const sockaddr* saddr);
 	condor_sockaddr(const sockaddr_in* sin) ;
 	condor_sockaddr(const sockaddr_in6* sin6);
+	condor_sockaddr(const sockaddr_storage* sin);
 
 private:
 	void init(uint32_t ip, unsigned port);
--- a/src/condor_utils/condor_sockaddr.cpp
+++ b/src/condor_utils/condor_sockaddr.cpp
@@ -65,6 +65,11 @@
 	}
 }
 
+condor_sockaddr::condor_sockaddr(const sockaddr_storage *sa)
+{
+	condor_sockaddr(reinterpret_cast<const sockaddr*>(sa));
+}
+
 condor_sockaddr::condor_sockaddr(const sockaddr_in* sin) 
 {
 	init(sin->sin_addr.s_addr, sin->sin_port);
@@ -85,6 +90,20 @@
 	return v6;
 }
 
+sockaddr_storage condor_sockaddr::to_storage() const
+{
+	sockaddr_storage tmp;
+	if (is_ipv4())
+	{
+		memcpy(&tmp, &v4, sizeof(v4));
+	}
+	else
+	{
+		memcpy(&tmp, &v6, sizeof(v6));
+	}
+	return tmp;
+}
+
 bool condor_sockaddr::is_ipv4() const
 {
 	return v4.sin_family == AF_INET;
--- a/externals/bundles/gsoap/2.7.10-p5/CMakeLists.txt
+++ b/externals/bundles/gsoap/2.7.10-p5/CMakeLists.txt
@@ -46,9 +46,9 @@
 							  patch -N --binary -p1 < ${CMAKE_CURRENT_SOURCE_DIR}/openssl_1_0.patch &&
 							  patch -N --binary -p1 < ${CMAKE_CURRENT_SOURCE_DIR}/version.patch)
 			if(DARWIN AND cxx_11)
-				set (GSOAP_CONFIGURE ./configure --prefix=${GSOAP_INSTALL_LOC} --disable-dependency-tracking "CPPFLAGS=-I${OPENSSL_INSTALL_LOC}/include/" "CXXFLAGS=-std=c++11 -stdlib=libc++" )
+				set (GSOAP_CONFIGURE ./configure --prefix=${GSOAP_INSTALL_LOC} --disable-dependency-tracking "CPPFLAGS=-I${OPENSSL_INSTALL_LOC}/include/ -DWITH_IPV6" "CXXFLAGS=-std=c++11 -stdlib=libc++ -DWITH_IPV6" "CFLAGS=-DWITH_IPV6" )
 			else()
-				set (GSOAP_CONFIGURE ./configure --prefix=${GSOAP_INSTALL_LOC} --disable-dependency-tracking "CPPFLAGS=-I${OPENSSL_INSTALL_LOC}/include/" )
+				set (GSOAP_CONFIGURE ./configure --prefix=${GSOAP_INSTALL_LOC} --disable-dependency-tracking "CPPFLAGS=-I${OPENSSL_INSTALL_LOC}/include/ -DWITH_IPV6" "CXXFLAGS=-DWITH_IPV6" "CFLAGS=-DWITH_IPV6" )
 			endif()
 			set (GSOAP_MAKE make )
 			set (GSOAP_INSTALL make install )
@@ -159,6 +159,9 @@
 		set( SOAPCPP2 ${SOAPCPP2} PARENT_SCOPE )
 		set( GSOAP_SHARE ${GSOAP_SHARE} PARENT_SCOPE )
 		set( HAVE_EXT_GSOAP ON PARENT_SCOPE )
+		# TODO: use pkg-config to detect the correct flags on proper
+		# builds
+		set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_IPV6" PARENT_SCOPE )
 
 		message ( STATUS "external configured (GSOAP_FOUND=${GSOAP_FOUND})" )
 
